#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '() :silent t)
  )

(defpackage :ros.script.Day2.3932655456
  (:use :cl))
(in-package :ros.script.Day2.3932655456)

(defparameter *tab* (format nil "~a" #\tab))

(defun read-input (file-name)
  (with-open-file (in file-name
                      :direction :input)
    (let ((content ()))
      (loop for line = (read-line in nil)
            while line
            do (let ((parsed-line ()))
                 (dolist (substr (uiop:split-string line :separator *tab*))
                   (push (parse-integer substr) parsed-line))
                 (push parsed-line content)))
      content)))

(defmacro solve (fn-name pick-fn bi-fn)
  `(defun ,fn-name (content)
    (let ((diffs ()))
      (dolist (nums content)
        (let* ((two-nums (funcall ,pick-fn nums))
               (mx (car two-nums))
              (mn (cdr two-nums)))
          (push (funcall ,bi-fn mx mn) diffs)))
      (reduce #'+ diffs :initial-value 0))))

(defun find-divisible (nums)
  (dolist (item nums)
    (let ((number (find-if
                   #'(lambda (x) (and (zerop (mod item x)) (not (= item x)))) nums)))
      (if number (return-from find-divisible (cons item number))))))

(solve part1 #'(lambda (arr) (cons (apply #'max arr) (apply #'min arr))) #'-)
(solve part2 #'find-divisible #'/)


(defun main (&rest argv)
  (declare (ignorable argv))
  (let ((file-path (elt argv 0)))
    (if (null file-path) (return-from main)
        (let ((content (read-input file-path)))
          (format t "Part1: ~a~%" (part1 content))
          (format t "Part2: ~a~%" (part2 content))))))
